/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;

        while(curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode findMiddle(ListNode head) {
        // hare(સસલું)-turtle(કાચબો) approch:
        // if turtle jump 1 step than hare jump 2 step untill hare reach at the end

        ListNode hare, turtle;
        hare = turtle = head;

        while(hare.next != null && hare.next.next != null) {
            hare = hare.next.next;
            turtle = turtle.next;
        }

        // when hare reach at the end of LL, turtle stand at middle possition
        return turtle;
    }

    public boolean isPalindrome(ListNode head) {
        // 3-step approch

        if(head == null || head.next == null) {
            return true;
        }
        ListNode firstHalf = head;
        ListNode middle = findMiddle(head); // 1. find middle node
        ListNode secondHalf = reverse(middle.next); // 2. reverse LL from middle

        while(secondHalf != null) {
            // 3. compare first half with reversed second half of LL
            if(firstHalf.val != secondHalf.val) {
                return false;
            }
            firstHalf = firstHalf.next;
            secondHalf = secondHalf.next;
        }
        return true;
    }
}